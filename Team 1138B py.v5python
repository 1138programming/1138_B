{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 381, 330.2, MM, 1)\nstorage = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\nintake = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\ncontroller_1 = Controller(PRIMARY)\n# vex-vision-config:begin\nvision_18__SIG_1 = Signature(1, -47, 47, 0,-3459, -2463, -2961,2.5, 0)\nvision_18 = Vision(Ports.PORT18, 50, vision_18__SIG_1)\n# vex-vision-config:end\nFlywheel_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nFlywheel_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nFlywheel = MotorGroup(Flywheel_motor_a, Flywheel_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_up_down_buttons_control_motors_stopped = True\ncontroller_1_x_b_buttons_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_up_down_buttons_control_motors_stopped, controller_1_x_b_buttons_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control Flywheel\n            if controller_1.buttonL1.pressing():\n                Flywheel.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                Flywheel.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                Flywheel.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonUp/buttonDown status\n            # to control storage\n            if controller_1.buttonUp.pressing():\n                storage.spin(FORWARD)\n                controller_1_up_down_buttons_control_motors_stopped = False\n            elif controller_1.buttonDown.pressing():\n                storage.spin(REVERSE)\n                controller_1_up_down_buttons_control_motors_stopped = False\n            elif not controller_1_up_down_buttons_control_motors_stopped:\n                storage.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_up_down_buttons_control_motors_stopped = True\n            # check the buttonX/buttonB status\n            # to control intake\n            if controller_1.buttonX.pressing():\n                intake.spin(FORWARD)\n                controller_1_x_b_buttons_control_motors_stopped = False\n            elif controller_1.buttonB.pressing():\n                intake.spin(REVERSE)\n                controller_1_x_b_buttons_control_motors_stopped = False\n            elif not controller_1_x_b_buttons_control_motors_stopped:\n                intake.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_x_b_buttons_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n\ndef onevent_controller_1buttonR1_pressed_0():\n    global myVariable\n    intake.spin(FORWARD)\n    storage.spin(FORWARD)\n\ndef when_started1():\n    global myVariable\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_stopping(COAST)\n    Flywheel.set_velocity(60, PERCENT)\n    intake.set_velocity(80, PERCENT)\n    storage.set_velocity(80, PERCENT)\n    intake.set_stopping(HOLD)\n    storage.set_stopping(HOLD)\n    Flywheel.set_stopping(COAST)\n\ndef onevent_controller_1buttonR2_pressed_0():\n    global myVariable\n    intake.spin(REVERSE)\n    storage.spin(REVERSE)\n\ndef onevent_controller_1buttonR2_released_0():\n    global myVariable\n    storage.stop()\n    intake.stop()\n\ndef onauton_autonomous_0():\n    global myVariable\n    Flywheel.spin(FORWARD)\n    drivetrain.drive_for(FORWARD,400,MM)  \n    drivetrain.turn_for(RIGHT, 11, DEGREES, wait=True)\n    wait(2.5,SECONDS)\n    digital_out_a.set(True)\n    wait(0.75,SECONDS)\n    digital_out_a.set(False)\n    wait(0.75,SECONDS)\n    digital_out_a.set(True)\n    wait(0.75,SECONDS)g\n    digital_out_a.set(False)\n    wait(0.75,SECONDS)\n    Flywheel.stop()\n    vision_18.largest_object().width_\n\n\ndef onevent_controller_1buttonA_pressed_0():\n    global myVariable\n    digital_out_a.set(True)\n    wait(1, SECONDS)\n    digital_out_a.set(False)\n\ndef onevent_controller_1buttonR1_released_0():\n    global myVariable\n    storage.stop()\n    intake.stop()\n\ndef ondriver_drivercontrol_0():\n    global myVariable\n    Flywheel.set_velocity(60, PERCENT)\n    drivetrain.set_drive_velocity(100, PERCENT)\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\n# system event handlers\ncontroller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)\ncontroller_1.buttonR2.pressed(onevent_controller_1buttonR2_pressed_0)\ncontroller_1.buttonR2.released(onevent_controller_1buttonR2_released_0)\ncontroller_1.buttonA.pressed(onevent_controller_1buttonA_pressed_0)\ncontroller_1.buttonR1.released(onevent_controller_1buttonR1_released_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[4,11,5,12,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"none","width":"15","unit":"in","wheelbase":"13","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[6],"name":"storage","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[7],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Flywheel","leftDir":"false","right":"","rightDir":"false","upDown":"storage","upDownDir":"false","xB":"intake","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[18],"name":"vision_18","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIG_1\",\"parameters\":{\"uMin\":-47,\"uMax\":47,\"uMean\":0,\"vMin\":-3459,\"vMax\":-2463,\"vMean\":-2961,\"rgb\":16382137.687423687,\"type\":0,\"name\":\"SIG_1\"},\"range\":2.5},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[1,2],"name":"Flywheel","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}