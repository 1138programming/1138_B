{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT17, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT6, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\nintake = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\nstorage = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\ndigital_out_h = DigitalOut(brain.three_wire_port.h)\n# vex-vision-config:begin\nvision_10__DISC = Signature(1, 1769, 2207, 1988,-4647, -4215, -4431,3, 0)\nvision_10 = Vision(Ports.PORT10, 50, vision_10__DISC)\n# vex-vision-config:end\nFlywheelJohn = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n\nvision_10_objects = 0 \n\ndef when_started():\n    global myvariable \n    i = 0 \n    digital_out_a.set(False)\n    intake.set_velocity(90,PERCENT)\n    storage.set_velocity(90,PERCENT)\n    FlywheelJohn.set_velocity(80,PERCENT)\n    drivetrain.set_drive_velocity(100,PERCENT)\n    drivetrain.set_stopping(COAST)\n    intake.set_stopping(HOLD)\n    FlywheelJohn.set_stopping(COAST)\n    pass\ndef onevent_controller_1buttonR1_pressed_0():\n    global myVariable\n    intake.spin(FORWARD)\n    storage.spin(FORWARD)\n    pass\ndef onevent_controller_1buttonR2_pressed_0():\n    global myVariable\n    intake.spin(REVERSE)\n    storage.spin(FORWARD)\n    \n    pass\ndef onevent_controller_1buttonR1_released_0():\n    global myVariable\n    intake.stop()\n    storage.stop()\n    pass\ndef onevent_controller_1buttonR2_released_0():\n    global myVariable\n    intake.stop()\n    storage.stop()\n    pass\n\ndef onevent_controller_1buttonA_pressed_0():\n    global myVariable\n    i = 0\n    if i == 1:\n        digital_out_h.set(False)\n        i = 0 \n    else:\n        digital_out_h.set(True)\n        i = 1   \n    pass\npass\n\ncenter_fovX = 180\ncenter_fovY = 180\noffset_x = 15\n\ndef onauton_autonomous_0():\n    global myVariable\n     #drivetrain.drive_for(REVERSE,10,MM)\n      #intake.spin_for(REVERSE,10,TURNS)\n      #drivetrain.drive_for(FORWARD,10,MM)\n    \n    \n    discs = 0\n    discfound = False\n    while discs < 3: \n        vision_10.take_snapshot(vision_10__DISC)\n        if vision_10.largest_object().exists == True:\n           drivetrain.drive(FORWARD)\n           Side_length_a = vision_10.largest_object().originX - center_fovX \n           discfound = True;\n           drivetrain.turn_for(RIGHT,Side_length_a,DEGREES)\n        else:\n          drivetrain.stop() \n           \n        pass\n        pass\n\n            \n    pass\n\n\ndef ondriver_drivercontrol_0():\n    global myVariable\n    pass\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\n# system event handlers\ncontroller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)\ncontroller_1.buttonR2.pressed(onevent_controller_1buttonR2_pressed_0)\ncontroller_1.buttonR2.released(onevent_controller_1buttonR2_released_0)\ncontroller_1.buttonA.pressed(onevent_controller_1buttonA_pressed_0)\ncontroller_1.buttonR1.released(onevent_controller_1buttonR1_released_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\n\n\n\n\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[19,17,6,9,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"},"triportSourcePort":null},{"port":[18],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[3],"name":"storage","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[8],"name":"digital_out_h","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[10],"name":"vision_10","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"DISC\",\"parameters\":{\"uMin\":1769,\"uMax\":2207,\"uMean\":1988,\"vMin\":-4647,\"vMax\":-4215,\"vMean\":-4431,\"rgb\":1,\"type\":0,\"name\":\"DISC\"},\"range\":3},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[1],"name":"FlywheelJohn","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}